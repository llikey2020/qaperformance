workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

default:
  tags: ["kubernetes"]

stages:
  - setup
  - run
  - collect
  - cleanup

variables:
  RUN_CONDITION:
    value: cold
    description: |
      (cold/warm) Whether to clear Alluxio cache or not before the run. 
      Manually starting the cleanup stage after the run will still clear Alluxio cache regardless
  JOB:
    value: JavaWordCount
    description: JavaWordCount, SampleResult, RunTPCDS, RunTPCHSmallDatePartition, RunTPCHLargeDatePartition
  SPARK_IMAGE:
    value: gitlab.planetrover.io:5050/sequoiadp/spark:latest
    description: Spark container image to test
  SPARK_DRIVER_MEMORY:
    value: 4g
    description: spark.driver.memory
  SPARK_EXECUTOR_MEMORY:
    value: 8g
    description: spark.executor.memory
  SPARK_EXECUTOR_CORES:
    value: 1
    description: spark.executor.cores
  SPARK_EXECUTOR_REQUEST_CORES:
    value: 1000m
    description: spark.kubernetes.executor.request.cores
  SPARK_DYNAMIC_ALLOCATION_ENABLED:
    value: "false"
    description: spark.dynamicAllocation.enabled
  SPARK_DYNAMIC_ALLOCATION_MAX_EXECUTORS:
    value: 4
    description: spark.dynamicAllocation.maxExecutors
  SPARK_DYNAMIC_ALLOCATION_MIN_EXECUTORS:
    value: 2
    description: spark.dynamicAllocation.minExecutors
  CACHE_SSD_SIZE:
    value: 40G
    description: Cache SSD quota
  SPARK_WAREHOUSE:
    value: spark-warehouse/
    description: Path in Alluxio UFS for the Spark SQL warehouse files
  SPARK_SQL_PERF_JAR:
    value: spark-sql-perf_2.12-0.5.1-SNAPSHOT.jar
    description: Path to package registry for the Spark SQL performance jar
  ALLUXIO_VERSION:
    value: 2.6.0
  ALLUXIO_SVC: alluxio-master-0.${KUBE_NAMESPACE}:19998
  SPARK_DEPENDENCY_DIR:
    value: spark-files/performance/
    description: Path in Alluxio UFS for the Spark SQL jar(s)
  SPARK_HISTORY_SERVER_ENABLED:
    value: "false"
    description: (true/false) Enable/disable spark history server
  SPARK_EVENT_LOG_ENABLED:
    value: "false"
    description: (true/false) Enable/disable spark event logging to persist Spark UI for the job
  SPARK_EVENTLOG_DIR: spark-logs/
  SPARK_DRIVER_POD_NAME: spark-driver
  SPARK_REGISTRY_LOGIN_SECRET: docker-login
  # Project variables configured in Settings -> CI/CD -> Variables:
  # - ALLUXIO_UFS
  # - AWS_ACCESS_KEY_ID
  # - AWS_SECRET_ACCESS_KEY

.environment:
  environment: testing

# Jobs that run spark extend this hidden job
.spark-run:
  image: ${SPARK_IMAGE}
  variables:
    GIT_STRATEGY: none
    SPARK_CONF_DIR: /tmp/spark/
  before_script:
    # Create the Spark defaults file with the common opts
    - mkdir -p ${SPARK_CONF_DIR}
    - cd ${SPARK_CONF_DIR}
    - |
      cat << EOF > spark-defaults.conf
      spark.master                                            k8s://${KUBE_URL}
      spark.kubernetes.report.interval                        60s
      spark.driver.memory                                     ${SPARK_DRIVER_MEMORY}
      spark.executor.memory                                   ${SPARK_EXECUTOR_MEMORY}
      spark.executor.cores                                    ${SPARK_EXECUTOR_CORES}
      spark.kubernetes.executor.request.cores                 ${SPARK_EXECUTOR_REQUEST_CORES}
      spark.dynamicAllocation.enabled                         ${SPARK_DYNAMIC_ALLOCATION_ENABLED}
      spark.dynamicAllocation.shuffleTracking.enabled         ${SPARK_DYNAMIC_ALLOCATION_ENABLED}
      spark.dynamicAllocation.maxExecutors                    ${SPARK_DYNAMIC_ALLOCATION_MAX_EXECUTORS}
      spark.dynamicAllocation.minExecutors                    ${SPARK_DYNAMIC_ALLOCATION_MIN_EXECUTORS}
      spark.kubernetes.driver.pod.name                        ${SPARK_DRIVER_POD_NAME}
      spark.kubernetes.authenticate.driver.serviceAccountName spark
      spark.kubernetes.container.image                        ${SPARK_IMAGE}
      spark.kubernetes.container.image.pullSecrets            ${SPARK_REGISTRY_LOGIN_SECRET}
      spark.kubernetes.container.image.pullPolicy             Always
      spark.kubernetes.namespace                              ${KUBE_NAMESPACE}
      spark.jars.ivy                                          /tmp/.ivy
      spark.sql.extensions                                    io.delta.sql.DeltaSparkSessionExtension
      spark.sql.catalog.spark_catalog                         org.apache.spark.sql.delta.catalog.DeltaCatalog
      spark.delta.logStore.class                              org.apache.spark.sql.delta.storage.LocalLogStore
      spark.driver.extraJavaOptions                           -Dalluxio.master.rpc.addresses=${ALLUXIO_SVC}
      spark.executor.extraJavaOptions                         -Dalluxio.master.rpc.addresses=${ALLUXIO_SVC}
      spark.sql.warehouse.dir                                 alluxio://${ALLUXIO_SVC}/${SPARK_WAREHOUSE}
      spark.eventLog.enabled                                  ${SPARK_EVENT_LOG_ENABLED}
      spark.eventLog.dir                                      alluxio://${ALLUXIO_SVC}/${SPARK_EVENTLOG_DIR}
      # spark.metrics.* confs enable spark-dashboard to monitor Spark job
      spark.metrics.conf.*.sink.graphite.class                org.apache.spark.metrics.sink.GraphiteSink
      spark.metrics.conf.*.sink.graphite.host                 spark-dashboard-influx.${KUBE_NAMESPACE}
      spark.metrics.conf.*.sink.graphite.port                 2003
      spark.metrics.conf.*.sink.graphite.period               10
      spark.metrics.conf.*.sink.graphite.unit                 seconds
      spark.metrics.conf.*.sink.graphite.prefix               sdp
      spark.metrics.conf.*.source.jvm.class                   org.apache.spark.metrics.source.JvmSource
      spark.metrics.appStatusSource.enabled                   true
      EOF
    - cat spark-defaults.conf

Setup environment:
  image: ${CI_REGISTRY}/planetrover/infrastructure/kubectl
  stage: setup
  extends:
    - .environment
  before_script:
    - apt-get update
    - apt-get install -y wget
  script:
    - bash cleanup-env.sh || true
    - bash setup-env.sh

Verify docker image:
  rules:
    - if: '$JOB == "JavaWordCount"'
  extends:
    - .environment
    - .spark-run
  stage: run
  script:
    - cd /opt/spark
    - |
      ./bin/spark-submit \
        --name "verification" \
        --deploy-mode cluster \
        --class org.apache.spark.examples.JavaWordCount \
        local:///opt/spark/examples/jars/spark-examples_2.12-3.0.2.jar \
        alluxio://${ALLUXIO_SVC}/matt/lorem.txt

Sample Performance Result:
  rules:
    - if: '$JOB == "SampleResult"'
  extends:
    - .environment
    - .spark-run
  variables:
    GIT_STRATEGY: clone
  stage: run
  script:
    - cd /opt/spark
    - |
      ./bin/spark-submit \
        --name "sample" \
        --deploy-mode cluster \
        --class "SampleResult" \
        --conf spark.kubernetes.file.upload.path=alluxio://${ALLUXIO_SVC}/${SPARK_DEPENDENCY_DIR} \
        file://${CI_PROJECT_DIR}/sampleresult_2.12-0.1.jar

TPCDS:
  rules:
    - if: '$JOB == "RunTPCDS"'
  extends:
    - .environment
    - .spark-run
  stage: run
  script:
    - cd /opt/spark
    - |
      ./bin/spark-submit \
        --deploy-mode cluster \
        --name "tpcds" \
        --class com.databricks.spark.sql.perf.RunTPCDS \
        ${CI_API_V4_URL}/projects/13/packages/generic/spark-sql-perf/0.5.1/${SPARK_SQL_PERF_JAR}?job_token=${CI_JOB_TOKEN}

TPCH-small-partition:
  rules:
    - if: '$JOB == "RunTPCHSmallDatePartition"'
  extends:
    - .environment
    - .spark-run
  stage: run
  script:
    - cd /opt/spark
    - |
      ./bin/spark-submit \
        --deploy-mode cluster \
        --name "tpch small partition" \
        --class com.databricks.spark.sql.perf.RunTPCHSmallDatePartition \
        ${CI_API_V4_URL}/projects/13/packages/generic/spark-sql-perf/0.5.1/${SPARK_SQL_PERF_JAR}?job_token=${CI_JOB_TOKEN}

TPCH-large-partition:
  rules:
    - if: '$JOB == "RunTPCHLargeDatePartition"'
  extends:
    - .environment
    - .spark-run
  stage: run
  script:
    - cd /opt/spark
    - |
      ./bin/spark-submit \
        --deploy-mode cluster \
        --name "tpch parge partition" \
        --class com.databricks.spark.sql.perf.RunTPCHLargeDatePartition \
        ${CI_API_V4_URL}/projects/13/packages/generic/spark-sql-perf/0.5.1/${SPARK_SQL_PERF_JAR}?job_token=${CI_JOB_TOKEN}

Collect logs:
  rules:
    - if: '$JOB != "JavaWordCount"'
  image: ${CI_REGISTRY}/planetrover/infrastructure/kubectl
  stage: collect
  extends:
    - .environment
  variables:
    SPARK_LOG: spark.log
    ALLUXIO_LOG: alluxio.log
    PARSED_RESULT: ${CI_JOB_STARTED_AT}_${RUN_CONDITION}_${CACHE_SSD_SIZE}.log
  script:
    - kubectl logs spark-driver | tee ${SPARK_LOG}
    - kubectl exec alluxio-master-0 -c alluxio-master -- alluxio fsadmin report metrics | tee ${ALLUXIO_LOG}
    - bash perfLogParser.sh ${SPARK_LOG} ${ALLUXIO_LOG} | tee ${PARSED_RESULT}
  artifacts:
    paths:
      - ${PARSED_RESULT}

Cleanup environment:
  image: ${CI_REGISTRY}/planetrover/infrastructure/kubectl
  stage: cleanup
  extends:
    - .environment
  variables:
    IS_MANUAL: "true"
  when: manual
  script:
    - bash cleanup-env.sh
